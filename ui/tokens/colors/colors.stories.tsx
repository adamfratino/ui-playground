import { Meta } from "@storybook/react";
import React from "react";
import { Introduction } from "~storybook/components";
import { tokens } from "~storybook/configs/parameters";
import { Box, Grid, Text } from "~ui/primitives";
import colors from "./colors";

export default {
  title: "UI/Tokens/Colors",
  parameters: { ...tokens },
} as Meta;

/** We need to strip the color aliases added by the theme for some reason */
const {
  reds,
  oranges,
  yellows,
  greens,
  blues,
  purples,
  greys,
  blacks,
  whites,
} = colors;
const palette = {
  reds,
  oranges,
  yellows,
  greens,
  blues,
  purples,
  greys,
  blacks,
  whites,
};

const gap = 4;

export const Colors: React.FC = () => (
  <>
    <Box variant="outer">
      <Introduction
        title="Colors"
        description={[
          `Color palettes are generated by taking a **base color** and generating
        **lighter** and **darker** values programmatically, using the handy
        [*lighten()*](https://polished.js.org/docs/#lighten) and
        [*darken()*](https://polished.js.org/docs/#darken) functions included
        with [**polished**](https://polished.js.org/).`,
          `The *singular variable* (i.e. **"red"**) of a color is equal to its
        *base value* (i.e. **"reds.base"**). Your team should decide together
        re: which syntax to use.`,
        ]}
      />
      <Headers />
      <div>
        {Object.entries(palette).map((color, i) => (
          <Grid gap={gap} key={i}>
            <Box
              backgroundColor="white"
              boxShadow="box.shallow"
              mb={gap}
              p={gap}
              width="100%"
            >
              <Text as="h3" variant="eyebrow" fontSize={5}>
                {color[0]}
              </Text>
            </Box>
            {Object.values(color[1]).map((shade, i) => (
              <Box
                key={i}
                backgroundColor={shade as string}
                boxShadow="box.shallow"
                mb={gap}
                padding="thin"
                sx={{ minHeight: 80 }}
              >
                <Box
                  backgroundColor="background.dark"
                  color="text.light"
                  boxShadow="box.shallow"
                  p={2}
                >
                  <Text as="span" variant="label">
                    {(shade as string).toUpperCase()}
                  </Text>
                </Box>
              </Box>
            ))}
          </Grid>
        ))}
      </div>
    </Box>
  </>
);

const Headers: React.FC = () => (
  <Grid gap={gap} pb={gap}>
    <div aria-hidden />
    {Object.keys(palette.reds).map((color, i) => (
      <Box key={i} boxShadow="box.shallow" backgroundColor="white" p={4}>
        <Text as="span" variant="eyebrow" fontSize={5}>
          {color}
        </Text>
      </Box>
    ))}
  </Grid>
);
